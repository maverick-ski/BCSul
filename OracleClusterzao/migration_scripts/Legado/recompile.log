SQL> 
SQL> begin
  2    for a in 1..10 loop
  3  	 @?/rdbms/admin/utlrp.sql
  3  Rem
  4  Rem $Header: utlrp.sql 24-jul-2003.10:06:51 gviswana Exp $
  5  Rem
  6  Rem utlrp.sql
  7  Rem
  8  Rem Copyright (c) 1998, 2003, Oracle Corporation.	All rights reserved.
  9  Rem
 10  Rem    NAME
 11  Rem      utlrp.sql - Recompile invalid objects
 12  Rem
 13  Rem    DESCRIPTION
 14  Rem     This script recompiles invalid objects in the database.
 15  Rem
 16  Rem     When run as one of the last steps during upgrade or downgrade,
 17  Rem     this script will validate all remaining invalid objects. It will
 18  Rem     also run a component validation procedure for each component in
 19  Rem     the database. See the README notes for your current release and
 20  Rem     the Oracle Database Upgrade book for more information about
 21  Rem     using utlrp.sql
 22  Rem
 23  Rem     Although invalid objects are automatically re-validated when used,
 24  Rem     it is useful to run this script after an upgrade or downgrade and
 25  Rem     after applying a patch. This minimizes latencies caused by
 26  Rem     on-demand recompilation. Oracle strongly recommends running this
 27  Rem     script after upgrades, downgrades and patches.
 28  Rem
 29  Rem   NOTES
 30  Rem      * This script must be run using SQL*PLUS.
 31  Rem      * You must be connected AS SYSDBA to run this script.
 32  Rem      * There should be no other DDL on the database while running the
 33  Rem	script.  Not following this recommendation may lead to deadlocks.
 34  Rem
 35  Rem   MODIFIED   (MM/DD/YY)
 36  Rem    gviswana	06/26/03 - Switch default to parallel if appropriate
 37  Rem    gviswana	06/12/03 - Switch default back to serial
 38  Rem    gviswana	05/20/03 - 2814808: Automatic parallelism tuning
 39  Rem    rburns	04/28/03 - timestamps and serveroutput for diagnostics
 40  Rem    gviswana	04/13/03 - utlrcmp.sql load -> catproc
 41  Rem    gviswana	06/25/02 - Add documentation
 42  Rem    gviswana	11/12/01 - Use utl_recomp.recomp_serial
 43  Rem    rdecker	11/09/01 - ADD ALTER library support FOR bug 1952368
 44  Rem    rburns	11/12/01 - validate all components after compiles
 45  Rem    rburns	11/06/01 - fix invalid CATPROC call
 46  Rem    rburns	09/29/01 - use 9.2.0
 47  Rem    rburns	09/20/01 - add check for CATPROC valid
 48  Rem    rburns	07/06/01 - get version from instance view
 49  Rem    rburns	05/09/01 - fix for use with 8.1.x
 50  Rem    arithikr	04/17/01 - 1703753: recompile object type# 29,32,33
 51  Rem    skabraha	09/25/00 - validate is now a keyword
 52  Rem    kosinski	06/14/00 - Persistent parameters
 53  Rem    skabraha	06/05/00 - validate tables also
 54  Rem    jdavison	04/11/00 - Modify usage notes for 8.2 changes.
 55  Rem    rshaikh	09/22/99 - quote name for recompile
 56  Rem    ncramesh	08/04/98 - change for sqlplus
 57  Rem    usundara	06/03/98 - merge from 8.0.5
 58  Rem    usundara	04/29/98 - creation (split from utlirp.sql).
 59  Rem			   Mark Ramacher (mramache) was the original
 60  Rem			   author of this script.
 61  Rem
 62  
 63  Rem ===========================================================================
 64  Rem BEGIN utlrp.sql
 65  Rem ===========================================================================
 66  
 67  @@utlprp.sql 0
 67  Rem Copyright (c) 2003, 2015, Oracle and/or its affiliates.
 68  Rem All rights reserved.
 69  Rem
 70  Rem    NAME
 71  Rem      utlprp.sql - Recompile invalid objects in the database
 72  Rem
 73  Rem    DESCRIPTION
 74  Rem      This script recompiles invalid objects in the database.
 75  Rem
 76  Rem      This script is typically used to recompile invalid objects
 77  Rem      remaining at the end of a database upgrade or downgrade.
 78  Rem
 79  Rem      Although invalid objects are automatically recompiled on demand,
 80  Rem      running this script ahead of time will reduce or eliminate
 81  Rem      latencies due to automatic recompilation.
 82  Rem
 83  Rem      This script is a wrapper based on the UTL_RECOMP package.
 84  Rem      UTL_RECOMP provides a more general recompilation interface,
 85  Rem      including options to recompile objects in a single schema. Please
 86  Rem      see the documentation for package UTL_RECOMP for more details.
 87  Rem
 88  Rem    INPUTS
 89  Rem      The degree of parallelism for recompilation can be controlled by
 90  Rem      providing a parameter to this script. If this parameter is 0 or
 91  Rem      NULL, UTL_RECOMP will automatically determine the appropriate
 92  Rem      level of parallelism based on Oracle parameters cpu_count and
 93  Rem      parallel_threads_per_cpu. If the parameter is 1, sequential
 94  Rem      recompilation is used. Please see the documentation for package
 95  Rem      UTL_RECOMP for more details.
 96  Rem
 97  Rem    NOTES
 98  Rem      * You must be connected AS SYSDBA to run this script.
 99  Rem      * There should be no other DDL on the database while running the
100  Rem	script.  Not following this recommendation may lead to deadlocks.
101  Rem
102  Rem    MODIFIED   (MM/DD/YY)
103  Rem    jmuller	12/09/14 - Fix bug 19728696 (sort of): clarify comments
104  Rem    pyam	04/08/14 - 18478064: factor out to reenable_indexes.sql
105  Rem    kquinn	11/01/11 - 13059165: amend 'OBJECTS WITH ERRORS' SQL
106  Rem    cdilling	05/15/10 - fix bug 9712478 - call local enquote_name
107  Rem    anighosh	02/19/09 - #(8264899): re-enabling of function based indexes
108  Rem			   not needed.
109  Rem    cdilling	07/21/08 - check bitand for functional index - bug 7243270
110  Rem    cdilling	01/21/08 - add support for ORA-30552
111  Rem    cdilling	08/27/07 - check disabled indexes only
112  Rem    cdilling	05/22/07 - add support for ORA-38301
113  Rem    cdilling	02/19/07 - 5530085 - renable invalid indexes
114  Rem    rburns	03/17/05 - use dbms_registry_sys
115  Rem    gviswana	02/07/05 - Post-compilation diagnostics
116  Rem    gviswana	09/09/04 - Auto tuning and diagnosability
117  Rem    rburns	09/20/04 - fix validate_components
118  Rem    gviswana	12/09/03 - Move functional-index re-enable here
119  Rem    gviswana	06/04/03 - gviswana_bug-2814808
120  Rem    gviswana	05/28/03 - Created
121  Rem
122  
123  SET VERIFY OFF;
124  
125  SELECT dbms_registry_sys.time_stamp('utlrp_bgn') as timestamp from dual;
126  
127  DOC
128  	The following PL/SQL block invokes UTL_RECOMP to recompile invalid
129  	objects in the database. Recompilation time is proportional to the
130  	number of invalid objects in the database, so this command may take
131  	a long time to execute on a database with a large number of invalid
132  	objects.
133  
134  	Use the following queries to track recompilation progress:
135  
136  	1. Query returning the number of invalid objects remaining. This
137  	   number should decrease with time.
138  	      SELECT COUNT(*) FROM obj$ WHERE status IN (4, 5, 6);
139  
140  	2. Query returning the number of objects compiled so far. This number
141  	   should increase with time.
142  	      SELECT COUNT(*) FROM UTL_RECOMP_COMPILED;
143  
144  	This script automatically chooses serial or parallel recompilation
145  	based on the number of CPUs available (parameter cpu_count) multiplied
146  	by the number of threads per CPU (parameter parallel_threads_per_cpu).
147  	On RAC, this number is added across all RAC nodes.
148  
149  	UTL_RECOMP uses DBMS_SCHEDULER to create jobs for parallel
150  	recompilation. Jobs are created without instance affinity so that they
151  	can migrate across RAC nodes. Use the following queries to verify
152  	whether UTL_RECOMP jobs are being created and run correctly:
153  
154  	1. Query showing jobs created by UTL_RECOMP
155  	      SELECT job_name FROM dba_scheduler_jobs
156  		 WHERE job_name like 'UTL_RECOMP_SLAVE_%';
157  
158  	2. Query showing UTL_RECOMP jobs that are running
159  	      SELECT job_name FROM dba_scheduler_running_jobs
160  		 WHERE job_name like 'UTL_RECOMP_SLAVE_%';
161  #
161  
162  DECLARE
163  	threads pls_integer := &&1;
164  BEGIN
165  	utl_recomp.recomp_parallel(threads);
166  END;
167  /
old 163:    threads pls_integer := &&1;
new 163:    threads pls_integer := 0;
SP2-0552: Bind variable "CLARIFY" not declared.
Elapsed: 00:00:00.00
SQL> 
SQL> SELECT dbms_registry_sys.time_stamp('utlrp_end') as timestamp from dual;

TIMESTAMP                                                                       
--------------------------------------------------------------------------------
COMP_TIMESTAMP UTLRP_END              2017-11-25 13:19:44                       

1 row selected.

Elapsed: 00:00:00.17
SQL> 
SQL> Rem #(8264899): The code to Re-enable functional indexes, which used to exist
SQL> Rem here, is no longer needed.
SQL> 
SQL> DOC
DOC> The following query reports the number of invalid objects.
DOC>
DOC> If the number is higher than expected, please examine the error
DOC> messages reported with each object (using SHOW ERRORS) to see if they
DOC> point to system misconfiguration or resource constraints that must be
DOC> fixed before attempting to recompile these objects.
DOC>#
SQL> select COUNT(*) "OBJECTS WITH ERRORS" from obj$ where status in (3,4,5,6);

OBJECTS WITH ERRORS                                                             
-------------------                                                             
              11874                                                             

1 row selected.

Elapsed: 00:00:00.03
SQL> 
SQL> 
SQL> DOC
DOC> The following query reports the number of exceptions caught during
DOC> recompilation. If this number is non-zero, please query the error
DOC> messages in the table UTL_RECOMP_ERRORS to see if any of these errors
DOC> are due to misconfiguration or resource constraints that must be
DOC> fixed before objects can compile successfully.
DOC> Note: Typical compilation errors (due to coding errors) are not
DOC>	   logged into this table: they go into DBA_ERRORS instead.
DOC>#
SQL> select COUNT(*) "ERRORS DURING RECOMPILATION" from utl_recomp_errors;

ERRORS DURING RECOMPILATION                                                     
---------------------------                                                     
                          4                                                     

1 row selected.

Elapsed: 00:00:00.01
SQL> 
SQL> Rem =====================================================================
SQL> Rem Reenable indexes that may have been disabled, based on the
SQL> Rem table SYS.ENABLED$INDEXES
SQL> Rem =====================================================================
SQL> 
SQL> @@?/rdbms/admin/reenable_indexes.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/reenable_indexes.sql /main/3 2015/02/04 13:57:27 sylin Exp $
SQL> Rem
SQL> Rem reenable_indexes.sql
SQL> Rem
SQL> Rem Copyright (c) 2014, 2015, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      reenable_indexes.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/reenable_indexes.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/reenable_indexes.sql
SQL> Rem    SQL_PHASE: REENABLE_INDEXES
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    SQL_CALLING_FILE: rdbms/admin/noncdb_to_pdb.sql
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    sylin	01/30/15 - bug20422151 - longer identifier
SQL> Rem    surman	01/08/15 - 19475031: Update SQL metadata
SQL> Rem    pyam	04/03/14 - Reenable indexes based on sys.enabled$indexes
SQL> Rem			   (formerly in utlprp.sql)
SQL> Rem    pyam	04/03/14 - Created
SQL> Rem
SQL> 
SQL> Rem
SQL> Rem Declare function local_enquote_name to pass FALSE
SQL> Rem into underlying dbms_assert.enquote_name function
SQL> Rem
SQL> CREATE OR REPLACE FUNCTION local_enquote_name (str varchar2)
  2   return varchar2 is
  3  	begin
  4  	     return dbms_assert.enquote_name(str, FALSE);
  5  	end local_enquote_name;
  6  /

Function created.

Elapsed: 00:00:00.20
SQL> Rem
SQL> Rem If sys.enabled$index table exists, then re-enable
SQL> Rem list of functional indexes that were enabled prior to upgrade
SQL> Rem The table sys.enabled$index table is created in catupstr.sql
SQL> Rem
SQL> SET serveroutput on
SQL> DECLARE
  2  	TYPE tab_char IS TABLE OF VARCHAR2(32767) INDEX BY BINARY_INTEGER;
  3  	commands tab_char;
  4  	p_null	 CHAR(1);
  5  	p_schemaname  dbms_id;
  6  	p_indexname   dbms_id;
  7  	rebuild_idx_msg BOOLEAN := FALSE;
  8  	non_existent_index exception;
  9  	recycle_bin_objs exception;
 10  	cannot_change_obj exception;
 11  	no_such_table  exception;
 12  	pragma exception_init(non_existent_index, -1418);
 13  	pragma exception_init(recycle_bin_objs, -38301);
 14  	pragma exception_init(cannot_change_obj, -30552);
 15  	pragma exception_init(no_such_table, -942);
 16  	type cursor_t IS REF CURSOR;
 17  	reg_cursor   cursor_t;
 18  
 19  BEGIN
 20  	-- Check for existence of the table marking disabled functional indices
 21  
 22  	SELECT NULL INTO p_null FROM DBA_OBJECTS
 23  	WHERE owner = 'SYS' and object_name = 'ENABLED$INDEXES' and
 24  		 object_type = 'TABLE' and rownum <=1;
 25  
 26  	   -- Select indices to be re-enabled
 27  	   EXECUTE IMMEDIATE q'+
 28  	      SELECT 'ALTER INDEX ' ||
 29  		      local_enquote_name(e.schemaname) || '.' ||
 30  		      local_enquote_name(e.indexname) || ' ENABLE'
 31  		 FROM	enabled$indexes e, ind$ i
 32  		 WHERE	e.objnum = i.obj# AND bitand(i.flags, 1024) != 0 AND
 33  			bitand(i.property, 16) != 0+'
 34  	   BULK COLLECT INTO commands;
 35  
 36  	   IF (commands.count() > 0) THEN
 37  	      FOR i IN 1 .. commands.count() LOOP
 38  		 BEGIN
 39  		 EXECUTE IMMEDIATE commands(i);
 40  		 EXCEPTION
 41  		    WHEN NON_EXISTENT_INDEX THEN NULL;
 42  		    WHEN RECYCLE_BIN_OBJS THEN NULL;
 43  		    WHEN CANNOT_CHANGE_OBJ THEN rebuild_idx_msg := TRUE;
 44  		 END;
 45  	      END LOOP;
 46  	   END IF;
 47  
 48  	   -- Output any indexes in the table that could not be re-enabled
 49  	   -- due to ORA-30552 during ALTER INDEX...ENBLE command
 50  
 51  	   IF  rebuild_idx_msg THEN
 52  	    BEGIN
 53  	      DBMS_OUTPUT.PUT_LINE
 54  ('The following indexes could not be re-enabled and may need to be rebuilt:');
 55  
 56  	      OPEN reg_cursor FOR
 57  		  'SELECT e.schemaname, e.indexname
 58  		   FROM   enabled$indexes e, ind$ i
 59  		   WHERE  e.objnum = i.obj# AND bitand(i.flags, 1024) != 0';
 60  
 61  	      LOOP
 62  		FETCH reg_cursor INTO p_schemaname, p_indexname;
 63  		EXIT WHEN reg_cursor%NOTFOUND;
 64  		DBMS_OUTPUT.PUT_LINE
 65  		   ('.... INDEX ' || p_schemaname || '.' || p_indexname);
 66  	      END LOOP;
 67  	      CLOSE reg_cursor;
 68  
 69  	    EXCEPTION
 70  		 WHEN NO_DATA_FOUND THEN CLOSE reg_cursor;
 71  		 WHEN NO_SUCH_TABLE THEN CLOSE reg_cursor;
 72  		 WHEN OTHERS THEN CLOSE reg_cursor; raise;
 73  	    END;
 74  
 75  	   END IF;
 76  
 77  	   EXECUTE IMMEDIATE 'DROP TABLE sys.enabled$indexes';
 78  
 79  	EXCEPTION
 80  	   WHEN NO_DATA_FOUND THEN NULL;
 81  
 82  END;
 83  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
SQL> 
SQL> DROP function local_enquote_name;

Function dropped.

Elapsed: 00:00:00.27
SQL> SET serveroutput off
SQL> 
SQL> 
SQL> Rem =====================================================================
SQL> Rem Run component validation procedure
SQL> Rem =====================================================================
SQL> 
SQL> SET serveroutput on
SQL> EXECUTE dbms_registry_sys.validate_components;

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.44
SQL> SET serveroutput off
SQL> 
SQL> 
SQL> Rem ===========================================================================
SQL> Rem END utlrp.sql
SQL> Rem ===========================================================================
SQL>   end loop;
SP2-0042: unknown command "end loop" - rest of line ignored.
SQL> end;
SP2-0042: unknown command "end" - rest of line ignored.
SQL> /
DROP function local_enquote_name
*
ERROR at line 1:
ORA-04043: object LOCAL_ENQUOTE_NAME does not exist 


Elapsed: 00:00:00.01
SQL> 
SQL> spool off
